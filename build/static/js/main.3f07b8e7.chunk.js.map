{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","loading","setLoading","items","setItems","React","count","setCount","item","setItem","addItem","a","newItem","name","id","db","getFirestore","addDoc","collection","docRef","console","log","error","deleteItem","deleteDoc","doc","filteredArray","filter","collectionItem","useEffect","getDocs","data","docs","map","fetchData","sh_items","index","className","Button","onClick","Box","component","sx","m","width","noValidate","autoComplete","TextField","label","value","variant","onChange","e","target","FormControl","fullWidth","InputLabel","Select","labelId","MenuItem","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3f07b8e7.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Card, CardBody} from 'react-simple-card';\n\n// MUI\nimport Button from '@mui/material/Button';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport {Box, TextField} from \"@mui/material\";\n\n// Import the functions you need from the SDKs you need\nimport {initializeApp} from \"firebase/app\"\nimport {getFirestore} from \"firebase/firestore\"\nimport {collection, getDocs, addDoc, deleteDoc, doc} from \"firebase/firestore\";\n\n\nconst firebaseApp = initializeApp({\n    apiKey: \"AIzaSyDT-m6oRI8x5YBfj5Ezkc8aYCPUPHG_OWs\",\n    authDomain: \"shoppinglist-38794.firebaseapp.com\",\n    databaseURL: \"https://shoppinglist-38794-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"shoppinglist-38794\",\n    storageBucket: \"shoppinglist-38794.appspot.com\",\n    messagingSenderId: \"23879437503\",\n    appId: \"1:23879437503:web:f6d7b2b49a992a10210a0a\",\n    measurementId: \"G-LE6W5D3QFG\"\n});\n\nfunction App() {\n\n    // loading state\n    const [loading, setLoading] = useState(true);\n    // shopping list items state\n    const [items, setItems] = useState([]);\n\n    // Input hooks\n    const [count, setCount] = React.useState(1);\n    const [item, setItem] = useState(\"\");\n\n\n// add a new item to data base and shopping list items\n    const addItem = async () => {\n        // create a new shopping list item\n        let newItem = {name: item, count: count, id: ''};\n        // add to database\n        const db = getFirestore();\n        try {\n            const docRef = await addDoc(collection(db, \"items\"), {\n                name: newItem.name,\n                count: newItem.count,\n            });\n            newItem.id = docRef.id;\n            console.log(\"Document written with ID: \", docRef.id);\n        } catch (e) {\n            console.error(\"Error adding document: \", e);\n        }\n\n        // update states\n        setItems([...items, newItem]);\n        setItem(\"\");\n        setCount(1);\n    }\n\n// delete item from database and UI\n    const deleteItem = async (item) => {\n        // remove from db\n        const db = getFirestore();\n        await deleteDoc(doc(db, \"items\", item.id));\n        // delete from items state and update state\n        let filteredArray = items.filter(collectionItem => collectionItem.id !== item.id);\n        setItems(filteredArray);\n    }\n\n    // load shopping list items\n    useEffect(() => {\n        const fetchData = async () => {\n            // database\n            const db = getFirestore();\n            // data\n            const data = await getDocs(collection(db, \"items\"));\n            // shopping list items: name, count and id\n            const items = data.docs.map(doc => {\n                return {\n                    name: doc.data().name,\n                    count: doc.data().count,\n                    id: doc.id\n                };\n            });\n            // set states\n            setItems(items);\n            setLoading(false);\n        }\n        // start loading data\n        fetchData();\n    }, []); // called only once\n\n\n    // render loading... text\n    if (loading) return (<p>Loading...</p>);\n\n    // create shopping list items\n    const sh_items = items.map((item, index) => {\n        return (\n            <Card className='max80'>\n                <CardBody className='flexRow'>\n                    <span key={index}>{item.name} {item.count}</span>\n                    <Button onClick={() => deleteItem(item)}>X</Button>\n                </CardBody>\n            </Card>\n        );\n    });\n\n    // render shopping list\n    return (\n        <div className=\"App\">\n            <div className='flexRow'>\n                <Box\n                    component=\"form\"\n                    sx={{\n                        '& > :not(style)': {m: 1, width: '25ch'},\n                    }}\n                    noValidate\n                    autoComplete=\"off\"\n                >\n                    < TextField\n                        id=\"filled-basic\"\n                        label=\"Enter item\"\n                        value={item}\n                        variant=\"filled\"\n                        onChange={e => setItem(e.target.value)}\n\n                    />\n                </Box>\n                <FormControl fullWidth>\n                    <InputLabel id=\"demo-simple-select-label\">Count</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        value={count}\n                        label=\"Count\"\n                        onChange={e => setCount(e.target.value)}\n                    >\n                        <MenuItem value={1}>1</MenuItem>\n                        <MenuItem value={2}>2</MenuItem>\n                        <MenuItem value={3}>3</MenuItem>\n                        <MenuItem value={4}>4</MenuItem>\n                        <MenuItem value={5}>5</MenuItem>\n                    </Select>\n                </FormControl>\n\n                <Button variant=\"outlined\" onClick={() => addItem()}>Add</Button>\n            </div>\n\n            {sh_items}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}